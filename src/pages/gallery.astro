---
import Layout from '../layouts/Layout.astro';

const galleryImages = [
  {
    url: "https://images.pexels.com/photos/4924154/pexels-photo-4924154.jpeg?auto=compress&cs=tinysrgb&w=800",
    alt: "Community garden project",
    title: "Urban Gardens",
    category: "Agriculture",
    location: "Metro City",
    year: "2023"
  },
  {
    url: "https://images.pexels.com/photos/3698534/pexels-photo-3698534.jpeg?auto=compress&cs=tinysrgb&w=800",
    alt: "Team building a structure",
    title: "Sustainable Building",
    category: "Construction",
    location: "Rural District",
    year: "2022"
  },
  {
    url: "https://images.pexels.com/photos/6647019/pexels-photo-6647019.jpeg?auto=compress&cs=tinysrgb&w=800",
    alt: "Farm planting",
    title: "Organic Farming",
    category: "Agriculture",
    location: "Valley Region",
    year: "2023"
  },
  {
    url: "https://images.pexels.com/photos/7656138/pexels-photo-7656138.jpeg?auto=compress&cs=tinysrgb&w=800",
    alt: "Conservation team at work",
    title: "Conservation Efforts",
    category: "Conservation",
    location: "National Park",
    year: "2022"
  },
  {
    url: "https://images.pexels.com/photos/4246119/pexels-photo-4246119.jpeg?auto=compress&cs=tinysrgb&w=800",
    alt: "Team planting trees",
    title: "Reforestation Project",
    category: "Conservation",
    location: "Mountain Region",
    year: "2024"
  },
  {
    url: "https://images.pexels.com/photos/4498362/pexels-photo-4498362.jpeg?auto=compress&cs=tinysrgb&w=800",
    alt: "Water conservation project",
    title: "Watershed Protection",
    category: "Water",
    location: "Riverside Community",
    year: "2023"
  },
  {
    url: "https://images.pexels.com/photos/8089449/pexels-photo-8089449.jpeg?auto=compress&cs=tinysrgb&w=800",
    alt: "Solar panel installation",
    title: "Renewable Energy",
    category: "Energy",
    location: "Coastal Village",
    year: "2022"
  },
  {
    url: "https://images.pexels.com/photos/8474484/pexels-photo-8474484.jpeg?auto=compress&cs=tinysrgb&w=800",
    alt: "Educational workshop",
    title: "Community Workshop",
    category: "Education",
    location: "Urban Center",
    year: "2024"
  },
  {
    url: "https://images.pexels.com/photos/2190283/pexels-photo-2190283.jpeg?auto=compress&cs=tinysrgb&w=800",
    alt: "Wildlife monitoring",
    title: "Wildlife Monitoring",
    category: "Conservation",
    location: "Wildlife Sanctuary",
    year: "2023"
  }
];

// Get unique categories
const categories = ['All', ...new Set(galleryImages.map(img => img.category))];
---

<Layout title="Gallery - Fieldwork Projects and Initiatives" description="Explore our gallery of fieldwork projects, from community gardens to conservation efforts around the world.">
  <!-- Page Header -->
  <section class="relative pt-32 pb-16 bg-forest-700 text-white">
    <div class="texture-overlay opacity-10"></div>
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <h1 class="text-4xl md:text-5xl font-serif font-bold text-center mb-6" data-aos="fade-up">Project Gallery</h1>
      <p class="text-xl text-white/80 text-center max-w-3xl mx-auto" data-aos="fade-up" data-aos-delay="100">
        A visual journey through our fieldwork projects and initiatives
      </p>
    </div>
  </section>
  
  <!-- Gallery Filters -->
  <section class="py-8 bg-earth-100 sticky top-16 z-10">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="max-w-6xl mx-auto">
        <div class="flex flex-wrap justify-center gap-4">
          {categories.map(category => (
            <button 
              class="px-4 py-2 rounded-full border border-earth-300 text-earth-800 hover:bg-earth-200 focus:outline-none focus:ring-2 focus:ring-forest-500 transition-colors category-filter" 
              data-category={category}
            >
              {category}
            </button>
          ))}
        </div>
      </div>
    </div>
  </section>
  
  <!-- Gallery Grid -->
  <section class="py-16 bg-white">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="max-w-6xl mx-auto">
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8" id="gallery-grid">
          {galleryImages.map((image, index) => (
            <div 
              class="gallery-item relative overflow-hidden rounded-lg shadow-lg h-80 transition-all duration-300 cursor-pointer" 
              data-category={image.category}
              data-aos="fade-up"
              data-aos-delay={index % 3 * 100}
            >
              <img 
                src={image.url} 
                alt={image.alt} 
                class="w-full h-full object-cover transition-transform duration-700 hover:scale-110"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300 flex flex-col justify-end p-6">
                <h3 class="text-xl text-white font-medium mb-1">{image.title}</h3>
                <p class="text-white/70 text-sm font-mono">{image.location} - {image.year}</p>
                <span class="inline-block mt-3 px-3 py-1 bg-vibrant-500 text-white text-xs rounded-full">
                  {image.category}
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </section>
  
  <!-- Gallery Modal -->
  <div id="gallery-modal" class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/90 opacity-0 pointer-events-none transition-opacity duration-300">
    <button id="close-modal" class="absolute top-4 right-4 text-white p-2 hover:bg-white/10 rounded-full">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    <div class="max-w-5xl w-full bg-white rounded-lg overflow-hidden shadow-2xl relative">
      <img id="modal-image" src="" alt="" class="w-full h-auto max-h-[80vh] object-contain" />
      <div class="p-6 bg-white">
        <h3 id="modal-title" class="text-2xl font-serif text-earth-900 mb-2"></h3>
        <p id="modal-details" class="text-earth-700"></p>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Gallery filtering functionality
  const galleryItems = document.querySelectorAll('.gallery-item');
  const filterButtons = document.querySelectorAll('.category-filter');
  
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Active state for buttons
      filterButtons.forEach(btn => btn.classList.remove('bg-forest-600', 'text-white'));
      button.classList.add('bg-forest-600', 'text-white');
      
      const category = button.getAttribute('data-category');
      
      galleryItems.forEach(item => {
        if (category === 'All' || item.getAttribute('data-category') === category) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });
  });
  
  // Set the first button (All) as active by default
  filterButtons[0].classList.add('bg-forest-600', 'text-white');
  
  // Gallery modal functionality
  const modal = document.getElementById('gallery-modal');
  const closeModalBtn = document.getElementById('close-modal');
  const modalImage = document.getElementById('modal-image');
  const modalTitle = document.getElementById('modal-title');
  const modalDetails = document.getElementById('modal-details');
  
  galleryItems.forEach(item => {
    item.addEventListener('click', () => {
      const img = item.querySelector('img');
      const title = item.querySelector('h3').textContent;
      const location = item.querySelector('p').textContent;
      const category = item.getAttribute('data-category');
      
      modalImage.src = img.src;
      modalImage.alt = img.alt;
      modalTitle.textContent = title;
      modalDetails.textContent = `${location} | Category: ${category}`;
      
      modal.classList.remove('opacity-0', 'pointer-events-none');
      document.body.style.overflow = 'hidden';
    });
  });
  
  // Close modal
  closeModalBtn.addEventListener('click', () => {
    modal.classList.add('opacity-0', 'pointer-events-none');
    document.body.style.overflow = 'auto';
  });
  
  // Close modal when clicking outside content
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.add('opacity-0', 'pointer-events-none');
      document.body.style.overflow = 'auto';
    }
  });
  
  // Close modal on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal.classList.contains('opacity-0')) {
      modal.classList.add('opacity-0', 'pointer-events-none');
      document.body.style.overflow = 'auto';
    }
  });
</script>